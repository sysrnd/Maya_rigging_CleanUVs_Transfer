//---------------------------------------------------------------------------
// cr_curveUtil.mel - MEL Script
//---------------------------------------------------------------------------
//Copyright (c) 2010 Wasim Khan creaturerigs.com 
//
//Permission is hereby granted, free of charge, to any person obtaining a copy of
//this software and associated documentation files (the "Software"), to deal in
//the Software without restriction, including without limitation the rights to
//use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
//the Software, and to permit persons to whom the Software is furnished to do so,
//subject to the following conditions:
//
//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
//FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
//COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
//IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
//CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
// DESCRIPTION:
//      curve control utilities
//
// REQUIRES:
//      cr_curveUtilitiesLib.mel
//
// AUTHOR:
//      Wasim Khan - wasim.cg@gmail.com
//----------------------------------------------------------------------------

cr_curveUtilitiesLib;
cr_help;

global proc cr_curveUtil()
{
if (`window -exists CurveUtilWin`)
deleteUI CurveUtilWin;

window
	-t "creatureRigs: Curve Utilities"
	-wh 250 570
	-mxb off
	-mnb on
	-resizeToFitChildren on
	-sizeable on
	-menuBar true
	CurveUtilWin;
	
menu -label "File";
menuItem -label "Install Shelf Button" -c "cr_installShelfBtn(\"cr_curveUtil\",\"\", \"circle\")";
menuItem -divider true;
menuItem -label "Close" -c ("deleteUI CurveUtilWin");
menu -label "Help" -helpMenu true;
menuItem -label "How to use" -c "cr_helpWindow()";

columnLayout -adj 1 -p CurveUtilWin mainCrvUtilColumn;

frameLayout -l "Prefix"
			-collapsable off
			-collapse off
			-borderStyle "etchedIn"
			-p mainCrvUtilColumn
			crvNamePrefixFrame;
rowColumnLayout -nc 2 -cw 1 175 -cw 2 60 -p crvNamePrefixFrame crvNamePrefixRCL;
    textFieldGrp -label "Name:" -tx "" -cw2 40 130 -p crvNamePrefixRCL curveConNameTFG;
    checkBox -label "Zero Grp" -p crvNamePrefixRCL zeroGrpCB;			

rowColumnLayout -nc 2 -cw 1 118 -cw 2 125  -p mainCrvUtilColumn cr_curveUtilShapeRCL;
    string $aWireTypes[] = {"arrow","circleCross","sphereCross","pyramid","pin1","directions","trans","foot","rotArrow","circleOrient","cross","square","cube1","cube2","orient","circle","sphere","plus","triangle","arc180","arc240","cone","thinSingleArrow","thinDoubleArrow","thinRotArrow90","thinRotArrow180","thinCross","fatCross","fatArc180","pin2","fatDoubleArrow","fatRotArrow90","fatRotArrow180","locator"};
    $aWireTypes = sort($aWireTypes);
    string $wireName;
    text -fn boldLabelFont -l "Curve Shape:" -align "left" -p cr_curveUtilShapeRCL curveShapeTitle;
    text -fn boldLabelFont -l " Operation:" -align "left" -p cr_curveUtilShapeRCL operationTitle;
    textScrollList -h 90 -allowMultiSelection false -dcc "cr_createControl();" -p cr_curveUtilShapeRCL WireTypeTSL;
    for ($wireName in $aWireTypes) textScrollList -e -append $wireName WireTypeTSL;
    radioButtonGrp -w 125 -label "" -numberOfRadioButtons 4 -vr -labelArray4 "Position" "Shape Parent" "Shape Replace" "Parent Constrain" -sl 1 -cw2 1 124 -p cr_curveUtilShapeRCL curveOperationRBG;

formLayout -p mainCrvUtilColumn mainForm;
    separator -height 5 -style "out" axisSep;
    text -fn boldLabelFont -l "Axis" -align "left" axisTitle;
    radioCollection facingRdBnCol;
    radioButton -label "X" facingXPosRdBn;
    radioButton -label "Y" facingYPosRdBn;
    radioButton -label "Z" facingZPosRdBn;
    radioCollection -e -sl facingXPosRdBn facingRdBnCol;
    checkBox -label "neg"  -align "left" negChBox;
    separator -height 5 -style "out" cr_locknHideSep;
    text -fn boldLabelFont -l "Lock and Hide" -align "left" lochnHideTitle;
    checkBoxGrp -ncb 4 -l1 "Translate" -l2 "Rotate" -l3 "Scale" -l4 "vis" -cw4 70 65 54 54 -va4 0 0 0 0 cr_locknHideCBG;
    separator -height 5 -style "out" cr_locknHideEndSep;	
    
    text -fn boldLabelFont -l "Type" -align "left" typeTitle;
    radioCollection typeRdBnCol;
    radioButton -label "as Transform" curveRdBn;
    radioButton -label "as Joint" jointRdBn;
    radioCollection -e -sl curveRdBn typeRdBnCol;
    separator -height 5 -style "out" wirescaleSep;
    text -fn boldLabelFont -l "Controller Scale" -align "left" conScaleTitle;
    string $cmd = "string $sel[] = `ls -sl`; float $conScale = `floatField -q -v conSize`; if (size($sel) != 0) cr_resizeCurves({}, 1, 1, 1, $conScale);";
    floatField -v 1.0 -precision 1 -enterCommand $cmd conSize;
    separator -height 5 -style "out" createSep1;
    button -l "Create"  -command "cr_createControl" snapBtn;
    button -l "Close"  -command "deleteUI CurveUtilWin" closeBtn;
    separator -height 5 -style "out" createSep2;
    
frameLayout -l "Utilities"
			-collapsable off
			-collapse off
			-borderStyle "etchedIn"
			-p mainForm
			crvUtilXtraFrame;
			
rowColumnLayout -nc 2 -cw 1 118 -cw 2 125 -p crvUtilXtraFrame utilitiesRCL;
	button -l "Rename Sel Shape" -command "cr_shapeRename(\"\")" -p utilitiesRCL;
	button -l "Rename All Shape" -command "cr_shapeRename(\"*\")" -p utilitiesRCL;
	button -l "Edit Shape" -command "cr_transfromUtilUI()" -p utilitiesRCL;
	button -l "Curve Maker" -command "cr_curveControlMaker()" -p utilitiesRCL;
	button -l "Shape Parent" -command "cr_UDShapeParent()" -p utilitiesRCL;
	button -l "Snap" -command "snap(\"\",\"\")" -p utilitiesRCL;

frameLayout -l "Color" 
    -collapsable off
    -collapse off
    -borderStyle "etchedIn"
    -p mainCrvUtilColumn
    fmColor;
columnLayout -p fmColor mainFmColorColumn;
    gridLayout -numberOfRows 4 -numberOfColumns 8 -cellWidthHeight 30 20 -p mainFmColorColumn;
    iconTextButton -bgc .627 .627 .627 -command "cr_updateColorSlider 0";
    iconTextButton -bgc .467 .467 .467 -command "cr_updateColorSlider 1";
    iconTextButton -bgc .000 .000 .000 -command "cr_updateColorSlider 2";
    iconTextButton -bgc .247 .247 .247 -command "cr_updateColorSlider 3";
    iconTextButton -bgc .498 .498 .498 -command "cr_updateColorSlider 4";
    iconTextButton -bgc 0.608 0 0.157 -command "cr_updateColorSlider 5";
    iconTextButton -bgc 0 0.016 0.373 -command "cr_updateColorSlider 6";
    iconTextButton -bgc 0 0 1 -command "cr_updateColorSlider 7";
    iconTextButton -bgc 0 0.275 0.094 -command "cr_updateColorSlider 8";
    iconTextButton -bgc 0.145 0 0.263 -command "cr_updateColorSlider 9";
    iconTextButton -bgc 0.78 0 0.78 -command "cr_updateColorSlider 10";
    iconTextButton -bgc 0.537 0.278 0.2 -command "cr_updateColorSlider 11";
    iconTextButton -bgc 0.243 0.133 0.122 -command "cr_updateColorSlider 12";
    iconTextButton -bgc 0.6 0.145 0 -command "cr_updateColorSlider 13";
    iconTextButton -bgc 1 0 0 -command "cr_updateColorSlider 14";
    iconTextButton -bgc 0 1 0  -command "cr_updateColorSlider 15";
    iconTextButton -bgc 0 0.255 0.6 -command "cr_updateColorSlider 16";
    iconTextButton -bgc 1 1 1 -command "cr_updateColorSlider 17";
    iconTextButton -bgc 1 1 0 -command "cr_updateColorSlider 18";
    iconTextButton -bgc 0.388 0.863 1 -command "cr_updateColorSlider 19";
    iconTextButton -bgc 0.263 1 0.635 -command "cr_updateColorSlider 20";
    iconTextButton -bgc 1 0.686 0.686 -command "cr_updateColorSlider 21";
    iconTextButton -bgc 0.89 0.675 0.475 -command "cr_updateColorSlider 22";
    iconTextButton -bgc 1 1 0.384 -command "cr_updateColorSlider 23";
    iconTextButton -bgc 0 0.6 0.325 -command "cr_updateColorSlider 24";
    iconTextButton -bgc 0.627 0.412 0.188 -command "cr_updateColorSlider 25";
    iconTextButton -bgc 0.62 0.627 0.188 -command "cr_updateColorSlider 26";
    iconTextButton -bgc 0.408 0.627 0.188 -command "cr_updateColorSlider 27";
    iconTextButton -bgc 0.188 0.627 0.365 -command "cr_updateColorSlider 28";
    iconTextButton -bgc 0.188 0.627 0.627 -command "cr_updateColorSlider 29";
    iconTextButton -bgc 0.188 0.404 0.627 -command "cr_updateColorSlider 30";
    iconTextButton -bgc 0.435 0.188 0.627 -command "cr_updateColorSlider 31";
colorIndexSliderGrp -min 0 -max 31 -value 0 -cw2 70 163 -p mainFmColorColumn conColor;

//rowColumnLayout -nc 1 -p mainCrvUtilColumn creditRCL;
separator -height 5 -style "out" -p mainCrvUtilColumn creditSep;
//text -align "center" -fn "boldLabelFont" -l "Author : wasim.cg@gmail.com"  -p mainCrvUtilColumn;
iconTextButton -style "iconOnly" -i "creatureRigs.png" -ann ("creatureRigs Tool \"Curve Utilities\"- Copyright Â©2010 Wasim Khan creaturerigs.com") -c ("showHelp -a \"http://creaturerigs.com/\"") -w 250 -h 30 -p mainCrvUtilColumn;
//-bgc 0.678 0.447 0.141 -al "left"
formLayout -e
    -af axisSep top 0
    -af axisSep left 0 
    -ap axisSep right 0 100
    
    -ac axisTitle top 2 axisSep
    -af axisTitle left 0 
    -ap axisTitle right 0 20
    
    -ac facingXPosRdBn top 0 axisSep
    -ac facingXPosRdBn left 0 axisTitle
    -ap facingXPosRdBn right 0 40
    
    -ac facingYPosRdBn top 0 axisSep
    -ac facingYPosRdBn left 0 facingXPosRdBn
    -ap facingYPosRdBn right 0 60
    
    -ac facingZPosRdBn top 0 axisSep
    -ac facingZPosRdBn left 0 facingYPosRdBn
    -ap facingZPosRdBn right 0 80

    -ac negChBox top 1 axisSep
    -ac negChBox left 0 facingZPosRdBn
    -ap negChBox right 0 100
    
    -ac cr_locknHideSep top 0 facingXPosRdBn
    -af cr_locknHideSep left 0
    -ap cr_locknHideSep right 0 100
    
    -ac lochnHideTitle top 0 cr_locknHideSep
    -af lochnHideTitle left 0
    -ap lochnHideTitle right 0 100
    
    -ac cr_locknHideCBG top 0 lochnHideTitle
    -af cr_locknHideCBG left 0
    -ap cr_locknHideCBG right 0 100	

    -ac cr_locknHideEndSep top 0 cr_locknHideCBG
    -af cr_locknHideEndSep left 0
    -ap cr_locknHideEndSep right 0 100
    
    -ac typeTitle top 2 cr_locknHideEndSep
    -af typeTitle left 0
    -ap typeTitle right 0 20
    
    -ac curveRdBn top 0 cr_locknHideEndSep
    -ac curveRdBn left 0 typeTitle
    -ap curveRdBn right 0 60
    
    -ac jointRdBn top 0 cr_locknHideEndSep
    -ac jointRdBn left 0 curveRdBn
    -ap jointRdBn right 0 100
    
    -ac wirescaleSep top 5 typeTitle
    -af wirescaleSep left 0
    -ap wirescaleSep right 0 100
    
    -ac conScaleTitle top 2 wirescaleSep
    -af conScaleTitle left 0
    -ap conScaleTitle right 0 50
    
    -ac conSize top 0 wirescaleSep
    -ac conSize left 0 conScaleTitle
    -ap conSize right 0 100
    
    -ac createSep1 top 0 conSize
    -af createSep1 left 0
    -ap createSep1 right 0 100
    
    -ac snapBtn top 0 createSep1
    -af snapBtn left 2
    -ap snapBtn right 0 50
    
    -ac closeBtn top 0 createSep1
    -ac closeBtn left 0 snapBtn
    -ap closeBtn right 2 100	
    
    -ac createSep2 top 0 snapBtn
    -af createSep2 left 0
    -ap createSep2 right 0 100	
    
    -ac crvUtilXtraFrame top 0 createSep2
    -af crvUtilXtraFrame left 0
    -ap crvUtilXtraFrame right 0 100
mainForm;	

showWindow CurveUtilWin;
}

global proc cr_updateColorSlider(int $color)
{
colorIndexSliderGrp  -e -value $color conColor;
string $objs[] = `ls -sl`; //initial selection
if (`size($objs)`!=0)
    {
    for($i=0;$i<size($objs);$i++)
        {
        $shape = `listRelatives -f -s $objs[$i]`;
        int $color = `colorIndexSliderGrp -q -v conColor`;
        if($color > 0)
            {
            setAttr ($shape[0] + ".overrideEnabled") 1; 
            setAttr ($shape[0] + ".overrideColor") ($color - 1);
            }  
        }
    }
}

global proc cr_facingAxisWrapper()
{
string $facingAxis;
int $facingX = `radioButton -q -select facingXPosRdBn`;
int $facingY = `radioButton -q -select facingYPosRdBn`;
int $facingZ = `radioButton -q -select facingZPosRdBn`;
int $facingNeg = `checkBox -q -v negChBox`;

if($facingX == 1) $facingAxis = "X";
if($facingY == 1) $facingAxis = "Y";
if($facingZ == 1) $facingAxis = "Z";
	cr_fixFacingAxis($facingAxis, $facingNeg);
}

global proc cr_createControl()
{
string $objs[] = `ls -sl`; //initial selection
int	$size = `size($objs)`;
string $shape[];
string $con[];

string $name = `textFieldGrp -q -tx curveConNameTFG`;
string $wireShape[0] = `textScrollList -q -si WireTypeTSL`;
int $zeroGrp = `checkBox -q -v zeroGrpCB`;
int $curveState = `radioButton -q -select curveRdBn`;
int $jointState = `radioButton -q -select jointRdBn`;	
int $operationState = `radioButtonGrp -q -select curveOperationRBG`;
int $cr_lockAndHideTrans = `checkBoxGrp -q -v1 cr_locknHideCBG`;
int $cr_lockAndHideRot = `checkBoxGrp -q -v2 cr_locknHideCBG`;
int $cr_lockAndHideScale = `checkBoxGrp -q -v3 cr_locknHideCBG`;
int $cr_lockAndHideVis = `checkBoxGrp -q -v4 cr_locknHideCBG`;
float $conScale = `floatField -q -v conSize`;
									
	if($operationState == 1)
	{
	if($curveState == 1)
	    $con = cr_curveControl ($wireShape[0], "curve");
	else
	    $con = cr_curveControl ($wireShape[0], "joint");
    for($x=0;$x<$size;$x++)
        {
        if($name != "")
            {        
            if($size > 1)
	            $con[$x] = `rename $con[$x] ($name+($x+1))`; 
            else
	            $con[0] = `rename $con[0] ($name)`;
            }        
        }
    // if nothing is selected
    if($size==0)
        $con[0] = `rename $con[0] ($name)`;

	select -r $con;
    if($zeroGrp == 1)
        cr_quickZeroOut "";   	
	cr_resizeCurves({}, 1, 1, 1, $conScale);
	cr_locknHide("",$cr_lockAndHideTrans,$cr_lockAndHideRot,$cr_lockAndHideScale,$cr_lockAndHideVis);
	cr_facingAxisWrapper();
		for($i=0;$i<size($con);$i++)
		{
		$shape = `listRelatives -f -s $con[$i]`;
		int $color = `colorIndexSliderGrp -q -v conColor`;
		if($color > 0)
		{
		setAttr ($shape[0] + ".overrideEnabled") 1; 
		setAttr ($shape[0] + ".overrideColor") ($color - 1);
		}
		}
	select -r $con;	
	}
	 
	if($operationState == 2)
	{
	if ($size <= 0)
		error ("Selction is empty Plz select the transform and try again");
	else
	{
		cr_shapeParent ("",$wireShape[0]);
		select -r $objs;
		cr_resizeCurves({}, 1, 1, 1, $conScale);
		cr_locknHide("",$cr_lockAndHideTrans,$cr_lockAndHideRot,$cr_lockAndHideScale,$cr_lockAndHideVis);
		cr_facingAxisWrapper();
		int $color = `colorIndexSliderGrp -q -v conColor`;
		if($color > 0)
		{
			for($i=0;$i<$size;$i++)
			{
			$shape = `listRelatives -f -s $objs[$i]`;
			for($c=0;$c<size($shape);$c++)
			{
			setAttr ($shape[$c] + ".overrideEnabled") 1;
			setAttr ($shape[$c] + ".overrideColor") ($color - 1);
			}
			}
		}
	}
	}
	
	if($operationState == 3)
	{
	if ($size <= 0)
		error ("Selction is empty Plz select the transform and try again");
	else
	{
	cr_shapeReplace ("",$wireShape[0]);
	select -r $objs;
	cr_resizeCurves({}, 1, 1, 1, $conScale);
	cr_locknHide("",$cr_lockAndHideTrans,$cr_lockAndHideRot,$cr_lockAndHideScale,$cr_lockAndHideVis);	
	cr_facingAxisWrapper();
	for($i=0;$i<$size;$i++)
		{
		$shape = `listRelatives -f -s $objs[$i]`;
		int $color = `colorIndexSliderGrp -q -v conColor`;
		if($color > 0)
		{
		setAttr ($shape[0] + ".overrideEnabled") 1;
		setAttr ($shape[0] + ".overrideColor") ($color - 1);
		}
		}
	}
	}

	if($operationState == 4)
	{
	if($curveState == 1)
	    $con = cr_curveControl ($wireShape[0], "curve");
	else
	    $con = cr_curveControl ($wireShape[0], "joint");
    for($x=0;$x<$size;$x++)
        {
        if($name != "")
            {        
            if($size > 1)	    
	            $con[$x] = `rename $con[$x] ($name+($x+1))`;
            else if ($size == 1)
	            $con[0] = `rename $con[0] ($name)`;
            else
	            $con[0] = `rename $con[0] ($name)`;	            
            }        
        //parent constrain
        parentConstraint -mo -weight 1 $con[$x] $objs[$x];
        }
	select -r $con;
    if($zeroGrp == 1)
        cr_quickZeroOut "";   	
	cr_resizeCurves({}, 1, 1, 1, $conScale);
	cr_locknHide("",$cr_lockAndHideTrans,$cr_lockAndHideRot,$cr_lockAndHideScale,$cr_lockAndHideVis);
	cr_facingAxisWrapper();
		for($i=0;$i<size($con);$i++)
		{
		$shape = `listRelatives -f -s $con[$i]`;
		int $color = `colorIndexSliderGrp -q -v conColor`;
		if($color > 0)
		{
		setAttr ($shape[0] + ".overrideEnabled") 1; 
		setAttr ($shape[0] + ".overrideColor") ($color - 1);
		}
		}
	select -r $con;	
	}
}

global proc cr_transfromUtilUI()
{
if (`window -exists transfromUtilWin`)
	deleteUI transfromUtilWin;

  window
  	-t "curve transfrom Win"
    -wh 232 250
    -mxb off
    -resizeToFitChildren on
    -sizeable off
    transfromUtilWin;
    columnLayout -adj 1 transfromUtilMainColumn;
    	
frameLayout -l "MOVE CURVE"
	-collapsable on
	-collapse off
	-borderStyle "etchedIn"
	-marginHeight 3
	-marginWidth 1
	moveCurveFrame;

formLayout editMoveform;

	button -l "X Axis" -w 70 -command "cr_moveCurveWrapper(\"X\",\"move\")" moveXaxisBtn;
	button -l "Y Axis" -w 70 -command "cr_moveCurveWrapper(\"Y\",\"move\")" moveYaxisBtn;
	button -l "Z Axis" -w 70 -command "cr_moveCurveWrapper(\"Z\",\"move\")" moveZaxisBtn;
	float $moveDegree[]={10, 5, 1, 0,-1,-5,-10};
	floatSliderGrp -f 1 -l "  %" -v 0 -min -360 -max 360 -cw3 20 30 20 -pre 0 moveCurveFSG;
	popupMenu -p moveCurveFSG;
		for($m=0;$m<size($moveDegree);++$m)
		{
		menuItem -l $moveDegree[$m] -c ("floatSliderGrp -e -v "+$moveDegree[$m]+" moveCurveFSG;");
		}

formLayout -e
    -af moveCurveFSG top 0 
    -af moveCurveFSG left 0 
    -ap moveCurveFSG right 0 100
    
    -ac moveXaxisBtn top 5 moveCurveFSG
    -af moveXaxisBtn left 0
    -ap moveXaxisBtn right 0 33			
    
    -ac moveYaxisBtn top 5 moveCurveFSG
    -ac moveYaxisBtn left 0 moveXaxisBtn
    -ap moveYaxisBtn right 0 66	
    
    -ac moveZaxisBtn top 5 moveCurveFSG
    -ac moveZaxisBtn left 0 moveYaxisBtn
    -ap moveZaxisBtn right 0 100		
editMoveform; 

setParent ..;
	setParent ..;

frameLayout -l "ROTATE CURVE"
	-collapsable on
	-collapse off
	-borderStyle "etchedIn"
	-marginHeight 3
	-marginWidth 1
	rotateCurveFrame;

formLayout editRotateform;

	button -l "X Axis" -w 70 -command "cr_rotateCurveWrapper(\"X\",\"rotate\")" rotXaxisBtn;
	button -l "Y Axis" -w 70 -command "cr_rotateCurveWrapper(\"Y\",\"rotate\")" rotYaxisBtn;
	button -l "Z Axis" -w 70 -command "cr_rotateCurveWrapper(\"Z\",\"rotate\")" rotZaxisBtn;
	float $rotDegree[]={360,270,180, 90, 45, 0,-45,-90,-180,-270,-360};
	floatSliderGrp -f 1 -l "  %" -v 90 -min -360 -max 360 -cw3 20 30 20 -pre 0 rotateCurveFSG;
	popupMenu -p rotateCurveFSG;
		for($r=0;$r<size($rotDegree);++$r)
		{
		menuItem -l $rotDegree[$r] -c ("floatSliderGrp -e -v "+$rotDegree[$r]+" rotateCurveFSG;");
		}
float $rotateValue =`floatSliderGrp -q -v rotateCurveFSG`;

formLayout -e
    -af rotateCurveFSG top 0 
    -af rotateCurveFSG left 0 
    -ap rotateCurveFSG right 0 100
    
    -ac rotXaxisBtn top 5 rotateCurveFSG
    -af rotXaxisBtn left 0
    -ap rotXaxisBtn right 0 33			
    
    -ac rotYaxisBtn top 5 rotateCurveFSG
    -ac rotYaxisBtn left 0 rotXaxisBtn
    -ap rotYaxisBtn right 0 66	
    
    -ac rotZaxisBtn top 5 rotateCurveFSG
    -ac rotZaxisBtn left 0 rotYaxisBtn
    -ap rotZaxisBtn right 0 100		
editRotateform; 

setParent ..;
	setParent ..;

frameLayout -l "RESIZE CURVE"
	-collapsable on
	-collapse off
	-borderStyle "etchedIn"
	-marginHeight 3
	-marginWidth 1
	scaleCurveFrame;
						    
    formLayout editScaleform;
					
float $scales[]={ 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0};
floatSliderGrp -f 1 -l "  %" -v 1 -min 0.1 -max 2.0 -cw3 20 30 20 -pre 1 resizeFSG;
popupMenu -p resizeFSG;
	for($s=0;$s<size($scales);++$s)
	{
	menuItem -l $scales[$s] -c ("floatSliderGrp -e -v "+$scales[$s]+" resizeFSG;");
	}
checkBoxGrp -ncb 3 -l1 "X" -l2 "Y" -l3 "Z" -cw3 40 40 40 -va3 1 1 1 resizeCBG;
button -l "Resize Curves" -ann "select curves you want to resize, set scale, choose axis (X, Y, Z). WARNING: if selected curve object has multiple shapeNodes you may have to select the actual shapeNodes of that curve to make it scale correctly!!" -c ("cr_resizeCurveWrapper();") resizeBtn;

formLayout -e
    -af resizeFSG top 0
    -af resizeFSG left 0
    -ap resizeFSG right 0 100		
    
    -ac resizeCBG top 5 resizeFSG
    -af resizeCBG left 50
    -ap resizeCBG right 0 100
    
    -ac resizeBtn top 5 resizeCBG
    -af resizeBtn left 0
    -ap resizeBtn right 0 100
editScaleform;

setParent ..;
	setParent ..;

showWindow transfromUtilWin;
}

global proc cr_rotateCurveWrapper(string $axis, string $mode)
{
	float $rotateValue =`floatSliderGrp -q -v rotateCurveFSG`;
	cr_editCurveTransform ($axis, $mode, $rotateValue);
} 

global proc cr_moveCurveWrapper(string $axis, string $mode)
{
	float $moveValue =`floatSliderGrp -q -v moveCurveFSG`;
	cr_editCurveTransform ($axis, $mode, $moveValue);
}

global proc cr_resizeCurveWrapper()
{
	float $scale=`floatSliderGrp -q -v resizeFSG`;
	int $x=`checkBoxGrp -q -v1 resizeCBG`;
	int $y=`checkBoxGrp -q -v2 resizeCBG`;
	int $z=`checkBoxGrp -q -v3 resizeCBG`;
	$scale = $scale/1.0;
	cr_resizeCurves({}, $x, $y, $z, $scale);
}